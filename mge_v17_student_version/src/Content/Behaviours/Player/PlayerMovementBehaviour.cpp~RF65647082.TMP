#include "PlayerMovementBehaviour.h"
#include <iostream>
#include "mge\core\GameObject.hpp"

PlayerMovementBehaviour::PlayerMovementBehaviour()
{
	_previousMousePosition = sf::Mouse::getPosition();
}

PlayerMovementBehaviour::~PlayerMovementBehaviour()
{
}

void PlayerMovementBehaviour::update(float deltaTime)
{
	/*
	float moveSpeed = 0.0f; //default if no keys
	float turnSpeed = 0.0f;
	float flySpeed = 0.0f;
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
		moveSpeed = _maxMoveSpeed;
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
		moveSpeed = -_maxMoveSpeed;
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
		turnSpeed = -_maxPitchRotationSpeed;
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
		turnSpeed = +_maxPitchRotationSpeed;
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::LShift)) {
		flySpeed = -_maxMoveSpeed;
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) {
		flySpeed = +_maxMoveSpeed;
	}
	//translate the object in its own local space
	_owner->translate(glm::vec3(0.0f, flySpeed*pStep, moveSpeed*pStep));
	_owner->rotate(glm::radians(turnSpeed*pStep), glm::vec3(0.0f, 1.0f, 0.0f));*/


	//_aimPointPosition = _aimPoint.transform.localPosition;

	sf::Vector2i mousePosition = sf::Mouse::getPosition();
	
	sf::Vector2i mouseInputRaw = sf::Vector2i(glm::sign(_previousMousePosition.x - mousePosition.x), 
											  glm::sign(_previousMousePosition.x - mousePosition.x));
	_previousMousePosition = mousePosition;
	_aimPointPosition.x = glm::clamp(_aimPointPosition.x + mouseInputRaw.x * deltaTime, -1.0f, 1.0f);
	_aimPointPosition.y = glm::clamp(_aimPointPosition.y + mouseInputRaw.y * deltaTime, -1.0f, 1.0f);

	//_aimPoint.transform.localPosition = new Vector3(aimPointPosition.x, aimPointPosition.y, _aimPoint.transform.localPosition.z);

	//Rotations
	float normalizedSpeed = 1 - _currentMoveSpeed / _maxMoveSpeed;

	//Pitch rotation
	float minMaxPitchRotationDiff = _maxPitchRotationSpeed - _minPitchRotationSpeed;
	_currentPitch += -_aimPointPosition.y * (_minPitchRotationSpeed + minMaxPitchRotationDiff * normalizedSpeed) * Time.deltaTime;


	//Yaw rotation
	float minMaxYawRotationDiff = _maxYawRotationSpeed - _minYawRotationSpeed;
	_currentYaw += _aimPointPosition.x * (_minYawRotationSpeed + minMaxYawRotationDiff * normalizedSpeed) * Time.deltaTime;


	//Roll rotation
	float rollDirection = (sf::Keyboard::isKeyPressed(sf::Keyboard::A) ? 1 : 0) - (sf::Keyboard::isKeyPressed(sf::Keyboard::A) ? 1 : 0);

	float minMaxRollRotationDiff = _maxRollRotationSpeed - _minRollRotationSpeed;
	_currentRoll += rollDirection * (_minRollRotationSpeed + minMaxRollRotationDiff * normalizedSpeed) * Time.deltaTime;

	if (_currentRoll < -_maxRollRotation - normalizedSpeed * _rollRotationSpeedMultiplier) _currentRoll = -_maxRollRotation - normalizedSpeed * _rollRotationSpeedMultiplier;
	if (_currentRoll > _maxRollRotation + normalizedSpeed * _rollRotationSpeedMultiplier) _currentRoll = _maxRollRotation + normalizedSpeed * _rollRotationSpeedMultiplier;

	float rollBackForce = 10.0f;
	if (rollDirection == 0)
	{
		_currentRoll = moveTowards(_currentRoll, 0, rollBackForce * Time.deltaTime);
	}
	
	//_owner->rotate(glm::radians(turnSpeed*pStep), glm::vec3(0.0f, 1.0f, 0.0f));
	//transform.rotation = Quaternion.Euler(_currentPitch, _currentYaw, _currentRoll);
	//glm::mat4x4 rotationMatrix;

	//Moving forward
	float forwardInput = (sf::Keyboard::isKeyPressed(sf::Keyboard::W) ? 1 : 0) - (sf::Keyboard::isKeyPressed(sf::Keyboard::S) ? 1 : 0);

	_currentMoveSpeed += forwardInput * _moveAcceleration * Time.deltaTime;
	_currentMoveSpeed = glm::clamp(_currentMoveSpeed, _minMoveSpeed, _maxMoveSpeed);
	
	if (forwardInput == 0) _currentMoveSpeed = moveTowards(_currentMoveSpeed, 0, _moveDecceleration * Time.deltaTime);

	//transform.position = transform.position + transform.forward * _currentMoveSpeed * Time.deltaTime;
}

float PlayerMovementBehaviour::moveTowards(float current, float target, float speed)
{
	bool direction = current < target ? 1 : current > target ? -1 : 0;
	current += speed * direction;
	if (direction != current < target ? 1 : current > target ? -1 : 0)
	{
		current = target;
	}
}
